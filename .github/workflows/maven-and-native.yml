name: CI with CMake and Maven

on:
  push:
    branches: desktop

jobs:
  javatest:
    name: Java ${{ matrix.java }} Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Java 8
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
          java-package: jdk

      - name: Verify Java
        run: mvn -B verify

  ubuntu:
    name: Ubuntu Natives (static)
    runs-on: ubuntu-latest
    needs: javatest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Compile Java for JNI headers
        run: mvn -B compile

      - name: Build build container
        run: |
          cd .github/workflows
          docker build -f Dockerfile.static -t libjitsi-static:${{ github.sha }} .

      - name: Build natives x86 (static)
        run: docker run -v ${{ github.workspace }}:/ghws libjitsi-static:${{ github.sha }} /bin/bash -c "/ghws/.github/workflows/build-static.sh m32 /ghws"

      - name: Upload Linux x86 natives
        uses: actions/upload-artifact@v2
        with:
          name: linux-x86
          path: lib/native/linux-x86

      - name: Build natives x64 (static)
        run: docker run -v ${{ github.workspace }}:/ghws libjitsi-static:${{ github.sha }} /bin/bash -c "/ghws/.github/workflows/build-static.sh m64 /ghws"

      - name: Upload Linux x64 natives
        uses: actions/upload-artifact@v2
        with:
          name: linux-x86-64
          path: lib/native/linux-x86-64

  windows:
    name: Windows ${{ matrix.arch}} Natives
    runs-on: windows-latest
    needs: javatest
    strategy:
      matrix:
        arch: [ x86, x64 ]
    steps:
      - name: Expand architecture
        id: expand_arch
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "::set-output name=cmake_arch::Win32"
            echo "::set-output name=jitsi_arch::x86"
          else
            echo "::set-output name=cmake_arch::x64"
            echo "::set-output name=jitsi_arch::x86-64"
          fi;

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Java 8
        id: install_java
        uses: actions/setup-java@v1
        with:
          java-version: 8
          java-package: jdk
          architecture: ${{ matrix.arch }}

      - name: Compile Java for JNI headers
        run: mvn -B compile

      - name: Build natives
        env:
          JAVA_HOME: ${{ steps.install_java.ouput.path }}
        run: |
          git config --global user.email "jitsi-jenkins@jitsi.org"
          git config --global user.name "Jitsi GitHub Action"
          
          cd $Env:GITHUB_WORKSPACE/src/native/
          cmake -B cmake-build-${{ matrix.arch}} -A ${{ steps.expand_arch.output.cmake_arch }}
          cmake --build cmake-build-${{ matrix.arch}} --config Release --target install

      - name: The job has failed
        if: ${{ failure() }}
        run: Compress-Archive -Path $Env:GITHUB_WORKSPACE/src/native/cmake-build-${{ matrix.arch}} -DestinationPath $Env:GITHUB_WORKSPACE/target/debug-logs.zip

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: win32-${{ matrix.arch}}-debug
          path: target/debug*

      - name: Upload Windows x86 natives
        uses: actions/upload-artifact@v2
        with:
          name: win32-${{ steps.expand_arch.output.jitsi_arch }}
          path: lib/native/win32-${{ steps.expand_arch.output.jitsi_arch }}

  mac:
    name: Mac Natives
    runs-on: macos-latest
    needs: javatest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Java 8
        id: install_java
        uses: actions/setup-java@v1
        with:
          java-version: 8
          java-package: jdk

      - name: Compile Java for JNI headers
        run: mvn -B compile

      - name: Build natives
        env:
          JAVA_HOME: ${{ steps.install_java.ouput.path }}
        run: |
          git config --global user.email "jitsi-jenkins@jitsi.org"
          git config --global user.name "Jitsi GitHub Action"
          brew install yasm
          cd $GITHUB_WORKSPACE/src/native/
          cmake -B cmake-build
          cmake --build cmake-build --config Release --target install

      - name: The job has failed
        if: ${{ failure() }}
        run: tar --exclude *.o -cvJf $GITHUB_WORKSPACE/target/debug-logs.tar.xz $GITHUB_WORKSPACE/src/native/cmake-build

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: darwin-debug
          path: target/debug*

      - name: Upload Mac natives
        uses: actions/upload-artifact@v2
        with:
          name: darwin
          path: lib/native/darwin

  multiplatform:
    name: Multiplatform Jar
    runs-on: ubuntu-latest
    needs: [ javatest, ubuntu, windows, mac ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Java 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
          java-package: jdk

      - name: Set version
        run: |
          VERSION=`git describe --match "v[0-9\.]*" --long --dirty --always`
          echo $VERSION
          mvn -B versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

      - name: Get Linux x86 natives
        uses: actions/download-artifact@v2
        with:
          name: linux-x86
          path: lib/native/linux-x86

      - name: Get Linux x64 natives
        uses: actions/download-artifact@v2
        with:
          name: linux-x86-64
          path: lib/native/linux-x86-64

      - name: Get Windows x86 natives
        uses: actions/download-artifact@v2
        with:
          name: win32-x86
          path: lib/native/win32-x86

      - name: Get Windows x64 natives
        uses: actions/download-artifact@v2
        with:
          name: win32-x86-64
          path: lib/native/win32-x86-64

      - name: Get Mac natives
        uses: actions/download-artifact@v2
        with:
          name: darwin
          path: lib/native/darwin

      - name: Package Java with built native libs
        run: mvn -B package -DperformRelease=true -DskipTests

      - name: Upload Multi-Platform Jar
        uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/*.jar
          if-no-files-found: error
